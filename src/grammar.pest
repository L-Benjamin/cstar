// Quiet rules

WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }


// Common definitions

ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
void = { "void" }
bool = { "true" | "false" }
int = @{ (ASCII_DIGIT+ | "0x" ~ ASCII_HEX_DIGIT+ | "0b" ~ ASCII_BIN_DIGIT+) }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ ("e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
char = @{ "'" ~ "\\"? ~ ANY ~ "'" }
string = @{ "\"" ~ (("\\" | !"\"") ~ ANY)* ~ "\"" }


// Files

program = { SOI ~ include* ~ element* ~ init ~ run ~ EOI }
module = { SOI ~ include* ~ element* ~ EOI }
include = { "include" ~ string ~ ";" }
init = { "Init" ~ "[" ~ (ident ~ ",")* ~ ident? ~ "]" ~ ";" }
run = { "Run" ~ "[" ~ (ident ~ ",")* ~ ident? ~ "]" ~ ";" }


// Elements

element = { component | resource | function | struct_ | system }
component = { "Component" ~ ident ~ struct_def }
resource = { "Resource" ~ ident ~ struct_def }
struct_ = { "struct" ~ ident ~ struct_def }
system = { "System" ~ ident ~ "(" ~ filter? ~ ")" ~ block }
function = { "function" ~ ident ~ "(" ~ (ident ~ ",")* ~ ident? ~ ")" ~ block }


// Types

void_t = { "void" } bool_t = { "bool" } int_t = { "int" }
float_t = { "float" } char_t = { "char" } string_t = { "string" }
list_t = { "list" } entity_t = { "entity" }
type_ = { void_t | bool_t | int_t | float_t | char_t | string_t | entity_t | ident }


// Curly braces and blocks

struct_def = { "{" ~ (type_ ~ ident ~ ";")* ~ "}" }
block = { "{" ~ stmt* ~ "}" }


// Filters and queries

entity_filter = { "Entity" ~ ident ~ ("," ~ arg)* ~ ","? }
arg = { ident ~ ident }
resource_filter = _{ arg }
filter = { entity_filter | (entity_filter ~ ";")? ~ (resource_filter ~ ";")* ~ resource_filter }


// Builtins and calls

call = { ident ~ "(" ~ (expr ~ ",")* ~ expr? ~ ")" }


// L-values

index = { ("[" ~ expr ~ "]")* }
lvalue = { ident ~ index ~ ("." ~ ident ~ index)* }


// Values

assign = { lvalue ~ "=" ~ expr }
atom = { void | bool | float | int | char | string }
list_init = { "[" ~ (expr ~ ",")* ~ expr? ~ "]" }
struct_init = { ident ~ "{" ~ (ident ~ ":" ~ expr ~ ";")* ~ "}" }
value = { atom | call | list_init | struct_init | assign | lvalue }


// Binary operators and expressions

binop = _{ add | sub | mul | div | mod_ | and | or | xor | bitand | bitor | shl | shr | leq | geq | lt | gt | eq | neq }
add = { "+" }  sub = { "-" }  mul = { "*" }  div = { "/" }    mod_ = { "%" }
and = { "&&" } or = { "||" }  xor = { "^" }  bitand = { "&" } bitor = { "|" }
shl = { "<<" } shr = { ">>" } leq = { "<=" } geq = { ">=" }   lt = { "<" }
gt = { ">" }   eq = { "==" }  neq = { "!=" }
binexpr = { term ~ (binop ~ term)+ }


// Unary operators and expressions

unop = { pos | neg | not | bitnot }
pos = { "+" } neg = { "-" } not = { "!" } bitnot = { "~" }
unexpr = { unop ~ term }


// Terms and expressions

ternary = { "(" ~ expr ~ ")" ~ "?" ~ expr ~ ":" ~ expr }
term = { value | unexpr | "(" ~ expr ~ ")" }
expr = { binexpr | ternary | term }


// Statements

if_ = { "if" ~ "(" ~ expr ~ ")" ~ block ~ ("else" ~ block)? }
for_ = { "for" ~ "(" ~ (decl | expr) ~ ";" ~ expr ~ ";" ~ expr ~ ")" ~ block }
while_ = { "while" ~ "(" ~ expr ~ ")" ~ block }
query = { "query" ~ "(" ~ entity_filter ~ ")" ~ block }
switch = { "switch" ~ "(" ~ expr ~ ")" ~ "{" ~ ("case" ~ atom ~ ":" ~ block)* ~ "default" ~ ":" ~ block ~ "}" }
break_ = { "break" }
continue_ = { "continue" }
return_ = { "return" ~ expr? }
decl = { "let" ~ ident ~ ("=" ~ expr)? }
stmt = { if_ | for_ | while_ | query | switch | block | (break_ | continue_ | return_ | decl | expr) ~ ";" | ";" }