// Quiet rules

WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }


// Common definitions

ident = { (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
int = { (ASCII_DIGIT+ | "0x" ~ ASCII_HEX_DIGIT+ | "0b" ~ ASCII_BIN_DIGIT+) }
float = { ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ ("e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
char = { "'" ~ "\\"? ~ ANY ~ "'" }
string = { "\"" ~ ((!"\"" | "\\") ~ ANY)* ~ "\"" }


// Files

program = { SOI ~ element* ~ init ~ run ~ EOI }
module = { SOI ~ element* ~ EOI }
init = { ^"Init" ~ "[" ~ ident* ~ "]" ~ ";" }
run = { ^"Run" ~ "[" ~ ident* ~ "]" ~ ";" }


// Elements

element = { component | resource | system | (const_ | import) ~ ";" }
component = { ^"Component" ~ ident ~ struct_ }
resource = { ^"Resource" ~ ident ~ struct_ }
system = { ^"System" ~ ident ~ filters ~ block }
import = { ^"import" ~ string }


// Curly braces and blocks

struct_ = { "{" ~ (declaration ~ ";")* ~ "}" }
block = { "{" ~ (statement ~ ";")* ~ expr? ~ "}" }


// Assignements, declarations and types

assignement = { ident ~ "=" ~ expr }
declaration = { type_ ~ (assignement | ident) }
const_ = { ^"const" ~ type_ ~ assignement }
primitive_type = { ^"void" | ^"bool" | ^"int" | ^"float" | ^"char" | ^"string" }
type_ = { ident | primitive_type ~ ("[" ~ expr ~ "]")+ | primitive_type ~ "*"+ }


// Filter and queries

filters = { "(" ~ (filter ~ ";")* ~ filter? ~ ")" }
filter = { ident ~ ("," ~ ^"const"? ~ declaration)? ~ ","? }


// Expressions

binop = { "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "&&" | "||" | "<<" | ">>" | "<" | ">" | "==" | "<=" | ">=" | "!=" }
unop = { "+" | "-" | "*" | "!" | "~" | "&" }
atom = { ident | int | float | char | string }
term = { atom | "(" ~ expr ~ ")" }
expr = { term ~ (binop ~ term)+ | unop ~ term | term | assignement | ^"if" ~ expr ~ block ~ (^"else" ~ block)? }


// Statements

while_ = { ^"while" ~ "(" ~ expr ~ ")" ~ block }
query = { ^"query" ~ filters ~ block }
for_ = { ^"for" ~ "(" ~ statement? ~ ";" ~ expr? ~ ";" ~ statement? ~ ")" ~ block }
break_ = { ^"break" }
continue_ = { ^"continue" }
statement = { expr | break_ | continue_ | declaration | const_ | while_ | query | for_ }