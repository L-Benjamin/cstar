/* Declare a function with the `function` keyword, it's name and it's parameters. */
function max(a, b) {
    /* You can use the ternary operator to return the larger of two values. */
    return (a > b) ? a : b;
}

/* Functions are not required to return a value. */
function greet(name) {
    println("Hello, ", name, "!");
}

System basic() {
    /* Call the function by it's name followed by it's arguments parameters. */
    println("max(2, 1) = ", max(2, 1));

    /* Argument typing is dynamic, si it is possible to pass anything as an argument. */
    println("max(\"Hello\", \"World\") = ", max("Hello", "World"));

    /* Calls to functions with no return will yield `void`. */
    let res = greet("John Doe");
    println("Greet function returned: ", res);
}

/*
 * Note: arguments to functions are always passed by value., except for structs and list
 * which are passed by reference.
 * Remark that strings are immutable.
 */

struct Complex {
    float re;
    float im;
}

/* Structs and list may be mutated in-place. This can be used to build procedures such as the following : */
function conjugate(z) {
    z.im = -z.im;
}

System advanced() {
    let z = Complex {
        re: 2.0;
        im: 3.0;
    };

    conjugate(z);
    println("z = ", z);
}

Init [basic, advanced];
Run [];